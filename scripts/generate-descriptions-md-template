#!/usr/bin/env python

import sys,json
import copy
import html2text
from bs4 import BeautifulSoup

text_maker = html2text.HTML2Text()
text_maker.body_width = 0 #disable random line-wrapping from html2text

tops = list()

def truncate(node, cuts, first):
	if not first and is_cut(node.get('title',''), cuts) and 'ideas' in node:
		if not 'attr' in node:
			node.update({'attr': dict()})
		node['attr'].update({'collapsed': True})

	for key, value in node.get('ideas', dict()).iteritems():
		truncate(value, cuts, False)

	return node

def emit_tree_snapshot(title, node):
	global cuts
	global resources

	truncated = truncate(copy.deepcopy(node), cuts, True)

	#TODO: include also the 'theme' from the graphic
	if not resources is None:
		truncated.update({'resources': resources})

	truncated.update({'attr' : { 'theme': 'straightlines'}})

	title = title.replace("?", "_")

	f1 = open('%s.mup' % title, 'w')
	f1.write(json.dumps(truncated))
	f1.close()
	return

def do_ideas(depth, cuts, node):
	count = 1
	for key, value in iter(sorted(node.get('ideas', dict()).iteritems(), key=lambda (k,v): (float(k),v) )):
		add_label(depth+1, cuts, value)
		count = count+1
	return

def is_cut(title, cuts):
	for cut in cuts:
		if cut.endswith('.'):
			match_pattern='%s'
		else:
			match_pattern='%s '

		if title.startswith(match_pattern % cut):
			return True
	
	return False

def add_label(depth, cuts, node):
	global tops

	working_title = node.get('title', None)
	if is_cut(working_title, cuts):
		tops.append(node)
		return
	else:
		level = 2

	if node.get('title', None) == 'AND':
		do_ideas(depth, cuts, node)
		return

	if node.get('title', None) == '...':
		do_ideas(depth, cuts, node)
		return

	if not node.get('title', '').find('(*)') == -1:
		do_ideas(depth, cuts, node)
		return

	description = get_description(node)

	if len(node.get('ideas', dict())) > 0:
		if len(description.strip()) > 0:
			print_title_headings_for_intermediate_node(level, working_title)
			print("\n%s" % description)
	else:
		print_title_headings_for_attack_vector_node(level, working_title)
		print_other_headings(level, working_title, description)

	collapsed = node.get('attr', dict()).get('collapsed', False)
	if not collapsed:
		do_ideas(depth, cuts, node)
	return

def print_title_headings_for_goal_node(level,title):
	print("\n\n%s Goal Description: Node %s" % ('#' * (level), title ))

def print_title_headings_for_intermediate_node(level,title):
	print("\n\n%s Intermediate Goal Description: Node %s" % ('#' * (level), title ))

def print_title_headings_for_attack_vector_node(level,title):
	print("\n\n%s Attack Description: Node %s" % ('#' * (level), title ))


def print_other_headings(level, title, description):
	global evita_tags

	description_lines = description.splitlines()

	classification_heading_found=False
	threat_heading_found=False
	mitigation_heading_found=False
	previous_blank=False
	for description_line in description_lines:
		if "# Attack Classification".lower() in description_line.lower() or description_line.strip().lower().endswith("Attack Classification:".lower()):
			classification_heading_found=True
			previous_blank=True
			print("\n%s Attack Classification" % ('#' * (level+1)))
		elif "# Attack Threat".lower() in description_line.lower() or description_line.strip().lower().endswith("Attack Threat:".lower()):
			threat_heading_found=True
			previous_blank=True
			print("\n%s Attack Threat" % ('#' * (level+1)))
		elif "# Mitigation Required".lower() in description_line.lower() or description_line.strip().lower().replace("mitigations","mitigation").endswith("Mitigation Required:".lower()):
			mitigation_heading_found=True
			previous_blank=True
			print("\n%s Mitigation Required" % ('#' * (level+1)))
		elif "EVITA:: " in description_line:
			evita_line = description_line.split('|')
			evita_tag = dict()
			evita_tag['Node'] = title
			evita_tag['FS'] = int(evita_line[1])
			evita_tag['OS'] = int(evita_line[2])
			evita_tag['PS'] = int(evita_line[3])
			evita_tag['SS'] = int(evita_line[4])
			evita_tag['ET'] = int(evita_line[5])
			evita_tag['E']  = int(evita_line[6])
			evita_tag['K']  = int(evita_line[7])
			evita_tag['WO'] = int(evita_line[8])
			evita_tag['EQ'] = int(evita_line[9])
			evita_tags.append(evita_tag)
		elif description_line.strip().lower().endswith("Description:".lower()):
			continue # skip Description: lines, all lines are emitted under a 'Attack Description' heading
		elif description_line.strip() == "":
			if not previous_blank:
				print(description_line)
				previous_blank=True
			continue # skip blank lines
		else:
			print(description_line)
			previous_blank=False

	
	if not classification_heading_found:
		print("\n%s Attack Classification" % ('#' * (level+1)))
	if not threat_heading_found:
		print("\n%s Attack Threat" % ('#' * (level+1)))
	if not mitigation_heading_found:
		print("\n%s Mitigation Required" % ('#' * (level+1)))

def add_graphic(node, title):
	emit_tree_snapshot(title, node)
	print("\n![%s tree snapshot](%s.png)" % (title, title.replace("?", "_")))

def detect_html(text):
	return bool(BeautifulSoup(text, "html.parser").find())

def get_description(node):
	global text_maker

	#prefer the mindmup 2.0 'note' to the 1.0 'attachment'
	description = node.get('attr', dict()).get('note', dict()).get('text', '')
	if description is '':
		description = node.get('attr', dict()).get('attachment', dict()).get('content', '')

	if detect_html(description):
		description = text_maker.handle(description)

	#remove line breaks between '|' -- to preserve tables in 1.0 mindmups (that end up in multiple <div>)
	description = re.sub(r'\|\n+\|', '|\n|', description, re.M)
	return description

def do_tops():
	global tops
	global cuts

	depth = 0
	heading_level = 1

	while len(tops) > 0:
		node = tops.pop(0)
		title = node.get('title', '')

		print_title_headings_for_goal_node(heading_level, title)
		add_graphic(node, title)
		description = get_description(node)
		print("\n%s" % description)

		do_ideas(depth, cuts, node)

evita_security_risk_table=[
	[0,0,0,0,0],
	[0,0,1,2,3],
	[0,1,2,3,4],
	[1,2,3,4,5],
	[2,3,4,5,6]
]
def get_evita_security_risk_level(non_safety_severity, combined_attack_probability):
	global evita_security_risk_table

	if non_safety_severity < 0 or non_safety_severity > 4:
		raise ValueError('encountered an invalid non-safety severity', non_safety_severity)
	return evita_security_risk_table[non_safety_severity][combined_attack_probability-1]

def do_evita(evita_tags):
	if len(evita_tags) < 1:
		return

	print("\n\n# EVITA Chart\n The following is the EVITA chart for the above tree.\n")
	print("Node | **FS** | **OS** | **PS** | **SS** | **ET** | **E** | **K** | **WO** | **EQ** | **APT** | **AP** | **CO** | **FR** | **OR** | **PR** | **SR**")
	print("----|---|---|---|---|----|---|---|----|----|-----|----|----|---|---|---|---")

	for evita_tag in evita_tags:
		evita_tag['APT'] = evita_tag['ET'] + evita_tag['E'] + evita_tag['K'] + evita_tag['WO'] + evita_tag['EQ']
		if evita_tag['APT'] < 0:
			raise ValueError('encountered negative Attack Potential Total (APT)', evita_tag)
		elif evita_tag['APT'] < 10:
			evita_tag['AP'] = 5
		elif evita_tag['APT'] < 14:
			evita_tag['AP'] = 4
		elif evita_tag['APT'] < 20:
			evita_tag['AP'] = 3
		elif evita_tag['APT'] < 25:
			evita_tag['AP'] = 2
		else:
			evita_tag['AP'] = 1
		#TODO support non-zero controllability
		evita_tag['CO'] = 0

		evita_tag['FR'] = get_evita_security_risk_level(evita_tag['FS'], evita_tag['AP'])
		evita_tag['OR'] = get_evita_security_risk_level(evita_tag['OS'], evita_tag['AP'])
		evita_tag['PR'] = get_evita_security_risk_level(evita_tag['PS'], evita_tag['AP'])
		evita_tag['SR'] = get_evita_security_risk_level(evita_tag['SS'], evita_tag['AP'])

		print("%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s" % (
			evita_tag['Node'],
			evita_tag['FS'],
			evita_tag['OS'],
			evita_tag['PS'],
			evita_tag['SS'],
			evita_tag['ET'],
			evita_tag['E'],
			evita_tag['K'],
			evita_tag['WO'],
			evita_tag['EQ'],
			evita_tag['APT'],
			evita_tag['AP'],
			evita_tag['CO'],
			evita_tag['FR'],
			evita_tag['OR'],
			evita_tag['PR'],
			evita_tag['SR'],
		))

	print("\n**FS** = Financial Severity **OS** = Operational Severity **PS** = Privacy Severity **SS** = Safety Severity **ET** = Elapsed Time **E** = Expertise **K** = Knowledge **WO** = Window of Opportuntiy **EQ** = Equiptment Required **APT** = Attack Potential Total **AP** = Attack Probability **CO** = Controlability (Safety) **FR** = Financial Risk **OR** = Operational Risk **PR** = PrivacyRisk **SR** = Safety Risk ")

cuts = sys.argv[1:]
data = json.load(sys.stdin)

resources = None
if 'resources' in data:
	resources = data['resources']
#TODO: capture the theme to transfer it to the subtree snapshots

if 'id' in data and data['id'] == 'root':
	#version 2 mindmup
	tops.append(data['ideas']['1'])
else:
	tops.append(data)

evita_tags = []

do_tops()

do_evita(evita_tags)
