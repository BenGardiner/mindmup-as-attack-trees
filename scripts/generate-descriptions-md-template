#!/usr/bin/env python

import sys,json
import copy
import html2text
from bs4 import BeautifulSoup

tops = list()

def truncate(node, cuts, first):
	if not first and is_cut(node.get('title',''), cuts) and 'ideas' in node:
		if not 'attr' in node:
			node.update({'attr': dict()})
		node['attr'].update({'collapsed': True})

	for key, value in node.get('ideas', dict()).iteritems():
		truncate(value, cuts, False)

	return node

def emit_tree_snapshot(title, node):
	global cuts
	global resources

	truncated = truncate(copy.deepcopy(node), cuts, True)

	#TODO: include also the 'theme' from the graphic
	if not resources is None:
		truncated.update({'resources': resources})

	truncated.update({'attr' : { 'theme': 'straightlines'}})

	title = title.replace("?", "_")

	f1 = open('%s.mup' % title, 'w')
	f1.write(json.dumps(truncated))
	f1.close()
	return

def do_ideas(depth, cuts, node):
	count = 1
	for key, value in iter(sorted(node.get('ideas', dict()).iteritems(), key=lambda (k,v): (float(k),v) )):
		add_label(depth+1, cuts, value)
		count = count+1
	return

def is_cut(title, cuts):
	for cut in cuts:
		if cut.endswith('.'):
			match_pattern='%s'
		else:
			match_pattern='%s '

		if title.startswith(match_pattern % cut):
			return True
	
	return False

def add_label(depth, cuts, node):
	global tops

	working_title = node.get('title', None)
	if is_cut(working_title, cuts):
		tops.append(node)
		return
	else:
		level = 2

	if node.get('title', None) == 'AND':
		do_ideas(depth, cuts, node)
		return

	if node.get('title', None) == '...':
		do_ideas(depth, cuts, node)
		return

	if not node.get('title', '').find('(*)') == -1:
		do_ideas(depth, cuts, node)
		return

	description = get_description(node)
	print_title_headings(level, working_title)
	print_other_headings(level, description)

	collapsed = node.get('attr', dict()).get('collapsed', False)
	if not collapsed:
		do_ideas(depth, cuts, node)
	return

def print_title_headings(level,title):
	print("\n\n%s Attack Description: Node %s" % ('#' * (level), title ))

def print_other_headings(level, description):
	description_lines = description.splitlines()

	classification_heading_found=False
	threat_heading_found=False
	mitigation_heading_found=False
	for description_line in description_lines:
		if "# Attack Classification".lower() in description_line.lower() or description_line.strip().lower().endswith("Attack Classification:".lower()):
			classification_heading_found=True
			print("\n%s Attack Classification" % ('#' * (level+1)))
		elif "# Attack Threat".lower() in description_line.lower() or description_line.strip().lower().endswith("Attack Threat:".lower()):
			threat_heading_found=True
			print("\n%s Attack Threat" % ('#' * (level+1)))
		elif "# Mitigation Required".lower() in description_line.lower() or description_line.strip().lower().endswith("Mitigation Required:".lower()):
			mitigation_heading_found=True
			print("\n%s Mitigation Required" % ('#' * (level+1)))
		elif "EVITA:: " in description_line:
			#TODO: catalog EVITAs
			evita = description.split('|')
		elif description_line.strip().lower().endswith("Description:".lower()):
			continue # skip Description: lines, all lines are emitted under a 'Attack Description' heading
		else:
			print(description_line)

	
	if not classification_heading_found:
		print("\n%s Attack Classification" % ('#' * (level+1)))
	if not threat_heading_found:
		print("\n%s Attack Threat" % ('#' * (level+1)))
	if not mitigation_heading_found:
		print("\n%s Mitigation Required" % ('#' * (level+1)))

def add_graphic(node, title):
	emit_tree_snapshot(title, node)
	print("\n![%s tree snapshot](%s.png)" % (title, title.replace("?", "_")))

def detect_html(text):
	return bool(BeautifulSoup(text, "html.parser").find())

def get_description(node):
	#prefer the mindmup 2.0 'note' to the 1.0 'attachment'
	description = node.get('attr', dict()).get('note', dict()).get('text', '')
	if description is '':
		description = node.get('attr', dict()).get('attachment', dict()).get('content', '')

	if detect_html(description):
		description = html2text.html2text(description)
	
	return description

def do_tops():
	global tops
	global cuts

	depth = 0
	heading_level = 1

	while len(tops) > 0:
		node = tops.pop(0)
		title = node.get('title', '')

		print_title_headings(heading_level, title)
		add_graphic(node, title)
		description = get_description(node)
		print_other_headings(heading_level, description)

		do_ideas(depth, cuts, node)


cuts = sys.argv[1:]
data = json.load(sys.stdin)

resources = None
if 'resources' in data:
	resources = data['resources']
#TODO: capture the theme to transfer it to the subtree snapshots

if 'id' in data and data['id'] == 'root':
	#version 2 mindmup
	tops.append(data['ideas']['1'])
else:
	tops.append(data)

do_tops()
