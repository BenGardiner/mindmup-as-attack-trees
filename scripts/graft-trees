#!/usr/bin/env python
from __future__ import print_function
from mindmup_as_attack_trees import *

import sys,json
import re
from collections import OrderedDict
import math
import argparse
parser = argparse.ArgumentParser()

parser.add_argument('mupin', help="the mindmup file that will receive the graft")
parser.add_argument('graft_point', help="the node title (verbatim) in the above mindmup file where the graft will occur")
parser.add_argument('graft', help="the mindmup file that will be grafted")

args = parser.parse_args()

import ipdb
def info(type, value, tb):
	ipdb.pm()

sys.excepthook = info

fd_in=open(args.mupin, 'r')
data = json.load(fd_in)
fd_in.close()

if 'id' in data and data['id'] == 'root':
	#version 2 mindmup
	root_node = data['ideas']['1']
else:
	root_node = data

graft_fd = open(args.graft, 'r')
graft_data = json.load(graft_fd)
graft_fd.close()

if 'id' in graft_data and graft_data['id'] == 'root':
	#version 2 mindmup
	graft_root_node = graft_data['ideas']['1']
else:
	graft_root_node = graft_data

def grafter(node):
	if get_node_title(node) == args.graft_point:
		graft_node = get_node_children(graft_root_node)[0]
		node.clear()
		node.update(graft_node)
	return

apply_each_node(root_node, grafter)

groom_forward_references(root_node)
dedup_with_references(root_node)
normalize_nodes(root_node)
str = json.dumps(data, indent=2, sort_keys=False)
str = re.sub(r'\s+$', '', str, 0, re.M)
str = re.sub(r'\s+$', '', str, flags=re.M)

fd_out=open(args.mupin,'w')
fd_out.write(str)

if len(sys.argv) >= 1:
	fd_out.close()

