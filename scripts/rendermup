#!/usr/bin/env node

const fs = require('fs');
const D3Node = require('d3-node');
const d3 = require('d3');
const path = require("path");
const yargs = require('yargs');

const argv = yargs
    .usage(`rendermup input.mup`)
    .demand(1)
    .option("w", {
        alias: "width",
        type: "number",
        describe: "The output file width, in pixels",
        default: "1260"
    })
    .option("h", {
        alias: "height",
        type: "number",
        describe: "The output file height, in pixels",
        default: "-1"
    })
    .option("r", {
        alias: "right-justified",
        type: "boolean",
        describe: "render the tree with all leaves at the right (i.e. cluster/dendrogram layout)",
        default: "false"
    })
    .option("d", {
        alias: "darkbg",
        type: "boolean",
        describe: "render on a dark background",
        default: "false"
    })
    .option("b", {
        alias: "bold",
        type: "boolean",
        describe: "render bold lines and text",
        default: "false"
    })
    .help(false)
    .argv;

const input = fs.readFileSync(argv._[0], 'utf8');
const outputHtmlFilename = path.basename(argv._[0], ".mup") + ".html";
const outputSvgFilename = path.basename(argv._[0], ".mup") + ".svg";
const outputPngFilename = path.basename(argv._[0], ".mup") + ".png";
const outputPdfFilename = path.basename(argv._[0], ".mup") + ".pdf";

const styles = `
`;

var margin = {top: 10, right: 24, bottom: 22, left: 40};

markup = '<div id="container"><div id="chart"></div></div>';
//markup = '<meta http-equiv="refresh" content="3">' + markup;
var options = {selector:'#chart', styles:styles, container:markup, d3Module:d3};
var d3n = new D3Node(options);

///-- start D3 code
do_draw = function(json) {
  var root_node = d3.hierarchy(json, function(d) {
    if (typeof d.ideas === "undefined"){ return null; }
    if (typeof d.attr !== "undefined" && typeof d.attr.collapsed !== "undefined" && d.attr.collapsed === true) { return null; }
    //sort(...) orders the ideas the same as the children are ordered in mindmup
    return Object.keys(d.ideas).sort(function(a,b) { return a - b; }).map(key => d.ideas[key]);
  });

  //Wow, this is embarrassing. Please look away!
  // 'works' only for 10pt sans-serif, here, when stars are properly aligned
  var approxTextWidth = (function() {
      function charW(w, c) {
          if (c == 'W' || c == 'M') w += 15;
          else if (c == 'w' || c == 'm') w += 12;
          else if (c == 'I' || c == 'i' || c == 'l' || c == 't' || c == 'f') w += 4;
          else if (c == 'r') w += 8;
          else if (c == c.toUpperCase()) w += 12;
          else w += 10;
          return w;
      }

      return function(s) {
          return s.split('').reduce(charW, 0) / 2;
      };
  })();

  var text_line_height = 10 * 1.1;
  var node_width_size;
  var node_height_size;
  if (argv.width !== -1 && argv.height == -1) {
    max_depth = 0;
    root_node.each(function(d){
      max_depth = Math.max(max_depth, d.depth);
    });
    available_text_width = Math.floor((argv.width - margin.left - margin.right) / (max_depth+1));

    node_width_size = available_text_width;
    //when not doing a dendrogram, the leaf nodes only get half the width for text
    if (!argv.r) {
      available_text_width = available_text_width / 2.0;
    }

    max_text_height = 0;
    root_node.each(function(d){
      if (argv.r && typeof d.children !== 'undefined') return;

      approx_height = Math.ceil(approxTextWidth(d.data.title) / available_text_width) * text_line_height;
      max_text_height = Math.max(max_text_height, approx_height);
    });
    node_height_size = max_text_height;

    if (argv.r) {
      node_height_size = node_height_size * 1.2;
    }
  }

  var svg = d3n.createSVG();

  width = argv.width - margin.left - margin.right;

  var tree_maker;
  if (argv.r) {
    //dendrograms
    tree_maker = d3.cluster();
  }
  else {
    tree_maker = d3.tree();
  }

  function is_freeheight_layout() { return argv.height == -1 && !argv.r; }

  var tree;
  if (is_freeheight_layout()) {
    tree = tree_maker.nodeSize([node_height_size, node_width_size]); //TODO why's all my stuff rotated 90deg?
  } else {
    var height;
    if (argv.r) {
      leaf_count = 0;
      root_node.each(function(d){
        if (typeof d.children !== 'undefined') return;

        leaf_count = leaf_count + 1;
      });

      height = (node_height_size + text_line_height) * leaf_count + 1 * text_line_height;
    } else {
      height = argv.height - margin.top - margin.bottom;
    }
    tree = tree_maker.size([height, width - node_width_size / 2 - margin.right]);
  }

  var tree_data = tree(root_node).descendants().slice(1);

  // For freeheight layouts, translate to keep all nodes in-view
  if (is_freeheight_layout()) {
    var min_x = Number.MAX_SAFE_INTEGER;
    root_node.each(function(d){
      min_x = Math.min(min_x, d.x);
    });

    root_node.each(function(d){
      d.x = d.x - min_x;
    });
  }

  // calculate the overall height
  max_x = 0;
  root_node.each(function(d){
    max_x = Math.max(max_x, d.x);
  });

  height = max_x + node_height_size;
  total_width = width + margin.left + margin.right;
  total_height = height + margin.top + margin.bottom;

  var g = svg
    .attr("width", total_width)
    .attr("height", total_height)
    .attr("viewBox", "0 0 " + total_width + " " + total_height)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var text_wrap_width = Number.MAX_SAFE_INTEGER;
  root_node.each(function(d){
    if (d.parent === null) return;

    text_wrap_width = Math.min(text_wrap_width, d.y - d.parent.y);
  });
  text_wrap_width = 0.9 * text_wrap_width;

  // In a dendrogram, give the leaf nodes more room -- but do it after sizing to *compensate* for the d3 rendering, not influence it.
  if (argv.r) {
    root_node.each(function(d){
      if (typeof d.children === 'undefined') {
        d.y = d.y - node_width_size / 2;
      }
    });
  }

  // In a dendrogram, bump the next sibling of blocks with looooong text
  if (argv.r) {
    root_node.each(function(d){
      if (typeof d.children !== 'undefined') return;
      if (d.parent === null) return;

      text_line_count = Math.ceil(approxTextWidth(d.data.title) / text_wrap_width);
      text_height = text_line_height * text_line_count;

      d.parent.children.forEach(function(child){
        if (child.x > d.x && child.x < d.x + text_height) {
          child.x = child.x + text_line_height;
        }
      });
    });
  }

  // a colormap for EVITA attack probability total where 1 is remote and 5 is highly likely
  apt_colormap = function palette(min, max) {
    var d = (max-min)/5;
    return d3.scaleThreshold()
      .range(['#add8e6','#a3eb92','#ffd700','#ffce69','#ffc0cb'])
      .domain([min+1*d,min+2*d,min+3*d,min+4*d,min+5*d]);
  }(1,5);

  var link = g.selectAll(".link")
    .data(tree_data)
    .enter().append("path")
      .attr("class", "link")
      .attr("stroke", function(d) {
        if (typeof d.parent.data.attr !== 'undefined' &&
            typeof d.parent.data.attr.evita_apt !== 'undefined' &&
            typeof d.data.attr !== 'undefined' &&
            typeof d.data.attr.evita_apt !== 'undefined') {
          return apt_colormap(d.data.attr.evita_apt);
        } else {
          return "#a3a3a3";
        }
      })
      .attr("stroke-width", function(d) {
        if (argv.bold) {
          return "3.5px";
        } else {
          return "1.5px";
        }
      })
      .attr("stroke-opacity", function(d) {
        if (argv.bold) {
          return "0.9";
        } else {
          return "0.7";
        }
      })
      .attr("fill", "none")
      .attr("d", function(d) {
        if (argv.bold) {
          stroke_width = 3.5;
        } else {
          stroke_width = 1.5;
        }

        elbow_point = (d.parent.y + 6*(d.y - d.parent.y) / 10)

        if (argv.r) {
          if (d.parent.parent === null) {
            var min_y = d.y;
            d.parent.children.forEach(function(entry){
              min_y = Math.min(min_y, entry.y);
            })
            elbow_point = (d.parent.y + (min_y - d.parent.y) / 2);
          } else {
            elbow_point = d.parent.y + Math.max(0, d.parent.children.length - 2) * 2 * stroke_width + 0.5;
          }
        }

        var this_childs_index = 0.0;
        var siblings_count = 0.0;
        if (d.parent !== null) {
          var count = 0;
          siblings_count = d.parent.children.length;
          d.parent.children.forEach(function(entry){
            count = count + 1;
            if (entry == d && d.parent.children.length > 1) {
              this_childs_index = (count - siblings_count / 2.0 - 0.5) * (stroke_width + 0.5)
           }
          })
        }
        return "M" + d.parent.y + "," + d.parent.x
            + "l" + Math.abs(this_childs_index) + "," + this_childs_index
            + "H" + Math.max(elbow_point - Math.abs(this_childs_index), d.parent.y + Math.abs(this_childs_index))
            + "V" + d.x + "H" + d.y;
      });

  function d3TextWrap(text, width) {
      var arrLineCreatedCount = [];
      text.each(function() {
          var text = d3.select(this),
              words = text.text().split(/[ \f\n\r\t\v]+/).reverse(), //Don't cut non-breaking space (\xA0), as well as the Unicode characters \u00A0 \u2028 \u2029)
              word,
              line = [],
              lineNumber = 0,
              lineHeight = 1.05, //Ems
              x = text.attr("x"),
              y = text.attr("y"),
              createdLineCount = 1; //Total line created count
          var textAlign = text.style('text-anchor') || 'left';
          var alignmentBase = text.style('alignment-baseline') || 'baseline';
          var adjusted_width = width;
          var node = text.datum();
          if (node.parent === null) {
            adjusted_width = width/2 + margin.left;
          }
          else if (is_attack_vector(node) || is_mitigation(node)) {
            if (! argv.r) {
              adjusted_width = 5/8 * width;
            }
          }

          dy = 0;
          x = 0;
          if (textAlign === 'start') {
            x = 8;
          }
          if (text.datum().parent === null) {
            x = x - margin.left;
            alignmentBase = 'hanging';
          }

          y = 3;
          if (alignmentBase === 'hanging') {
            y = 12;
          } else if (alignmentBase === 'ideographic') {
            y = -6;
          }

          var tspan = text.text(null)
            .append("tspan")
            .attr("x", x).attr("y", y).attr("dy", dy + "em")
            .attr("font-weight", function(d) {
              if (argv.bold) {
                return "bold";
              } else {
                return "normal";
              }
            })
            .attr("font-size", "10px")
            .attr("font-family", "sans-serif");

          if (is_out_of_scope(node)) {
            tspan.attr("text-decoration", "line-through")
          }
          while (word = words.pop()) {
              line.push(word);
              tspan.text(line.join(" "));
              if (approxTextWidth(line.join(" ")) > adjusted_width && line.length > 1) {
                  line.pop();
                  tspan.text(line.join(" "));
                  line = [word];
                  tspan = text.append("tspan")
                    .attr("x", x).attr("y", y)
                    .attr("dy", ++lineNumber * lineHeight + dy + "em")
                    .attr("font-weight", function(d) {
                      if (argv.bold) {
                        return "bold";
                      } else {
                        return "normal";
                      }
                    })
                    .attr("font-size", "10px")
                    .attr("font-family", "sans-serif");
                  if (is_out_of_scope(node)) {
                    tspan.attr("text-decoration", "line-through")
                  }

                  tspan.text(word); //TODO: don't use dy -- it is making glitches in jsdom; instead increment by 1.1* font size in px (assume 10 for now)
                  ++createdLineCount;
              }
          }

          arrLineCreatedCount.push(createdLineCount); //Store the line count in the array
      });
      return arrLineCreatedCount;
  }

  function get_raw_description(d) {
    var description = ((d.data.attr || {}).note || {}).text || '';
    if (description === '') {
      description = ((d.data.attr || {}).attachment || {}).content || ''
    }

    return description;
  }

  function is_collapsed(d) {
    collapsed = (d.data.attr || {}).collapsed || false;
    return collapsed;
  }
  
  function get_title(d) {
    return d.data.title || '';
  }

  function is_leaf(d) {
    return typeof d.children === 'undefined';
  }

  function is_mitigation(d) {
    return is_leaf(d) && /Mitigation: /.test(get_title(d));
  }

  function is_all(d, predicate) {
    if (typeof d.children === 'undefined') return True;

    result = true;
    d.children.forEach(function(d) {
      result = result & predicate(d);
    });

    return result;
  }

  function is_attack_vector(d) {
    if (! is_leaf(d)) {
      return is_all(d, is_mitigation);
    } else {
      return ! is_mitigation(d);
    }
  }

  function is_reference(d) {
    return ( get_title(d).search("\\(\\*\\)") !== -1  ) || (/\(\d+\..*?\)/.test(get_title(d)));
  }

  function is_out_of_scope(d) {
    description = get_raw_description(d);
    return (/out of scope/i.test(description) || /OUT_OF_SCOPE::/.test(description));
  }

  var node = g.selectAll(".node")
    .data(root_node.descendants())
    .enter().append("g")
      .attr("class", function(d) {
        if (is_attack_vector(d)) {
          if (is_reference(d)) {
            return "node node--vector_ref";
          } else if (is_out_of_scope(d)) {
            return "node node--vector_oos";
          } else {
            return "node node--vector";
          }
        } else if (is_mitigation(d)) {
          if (is_reference(d)) {
            return "node node--mitigation_ref";
          } else {
            return "node node--mitigation";
          }
        } else {
          return "node node--internal";
        }
        return "node node--internal";
      })
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  node.filter(function (d) { return ! is_mitigation(d); })
      .append("circle")
      .attr("stroke", function(d) {
        if (typeof d.data.attr !== 'undefined')
          return apt_colormap(d.data.attr.evita_apt);
      })
      .attr("stroke-width", function(d) {
        if (argv.bold) {
          return "3.0px";
        } else {
          return "1.5px";
        }
      })
      .attr("fill", function(d) {
        if (is_reference(d) || is_collapsed(d)) {
          return "#ffffff";
        }
        if (is_attack_vector(d)) {
          return "#000000";
        }
        return "#ffffff";
      })
      .attr("r", 2.5);

  node.filter(function (d) { return is_mitigation(d); })
      .append("rect")
      .attr("stroke", "#00d300")
      .attr("stroke-width", function(d) {
        if (argv.bold) {
          return "3.0px";
        } else {
          return "1.5px";
        }
      })
      .attr("fill", function(d) {
        if (is_reference(d)) {
          return "none";
        }
        return "#00ff00";
      })
      .attr("y", -2.5)
      .attr("width", 5.0)
      .attr("height", 5.0);

  node.append("text")
      .attr("dy", 3)
      .attr("fill", function(d) {
          if (argv.darkbg) {
            return "#ffffff";
          } else {
            return "#000000";
          }
      })
      .attr("x", function(d) { return d.children ? -8 : 8; })
      .attr("fill", function(d) {
        if (argv.darkbg) {
          return "#ffffff";
        } else {
          return "#000000";
        }
      })
      .style("text-anchor", function(d) {
          if (d.parent === null) {
            return "start";
          }
          if (is_leaf(d)) {
            return "start";
          }
          return "middle";
      })
      .style("alignment-baseline", function(d) {
          if (d.data.title === "AND" || d.data.title === "OR") {
            return "middle";
          }
          if (d.parent === null) {
            return "ideographic";
          }
          if (is_leaf(d)) {
            return "baseline";
          }
          return "hanging";
      })
      .text(function(d) { return d.data.title; })
      .call(d3TextWrap, text_wrap_width, 0, 0);
};

mindmup_json = JSON.parse(input);

if (typeof mindmup_json.id !== "undefined" && mindmup_json['id'] === "root") { // handle >= 2 mindmup_json
  mindmup_json = mindmup_json['ideas']['1'];
}

do_draw(mindmup_json);

/// -- end D3 code

// create output files
var svg_string = d3n.svgString();
var svgBuffer = new Buffer(svg_string, 'utf-8');

var PDFDocument = require('pdfkit'),
    SVGtoPDF = require('svg-to-pdfkit');

var pdf_doc = new PDFDocument({
      'size': [total_width - margin.right, total_height - margin.bottom],
      'margin': 0
    }),
    pdf_stream = fs.createWriteStream(outputPdfFilename);

SVGtoPDF(pdf_doc, svg_string, 0, 0, {
  'assumePt': true
});

pdf_doc.page.dictionary.data.CropBox = [0, 0, total_width, total_height]
pdf_doc.page.dictionary.data.TrimBox = [0, 0, total_width, total_height]
pdf_doc.page.dictionary.data.BleedBox = [0, 0, total_width, total_height]

pdf_stream.on('finish', function() {
  console.log('>> Exported: "'+outputPdfFilename+'"');
});

pdf_doc.pipe(pdf_stream);
pdf_doc.end();

const svg2png = require('svg2png');

fs.writeFile(outputSvgFilename, svg_string, function () {
  console.log('>> Exported: "'+outputSvgFilename+'"');
});
svg2png(svgBuffer)
  .then(buffer => fs.writeFileSync(outputPngFilename, buffer))
  .catch(e => console.error('ERR:', e))
  .then(err => console.log('>> Exported: "'+outputPngFilename+'"'));

